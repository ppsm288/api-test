# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- develop

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '5655e819-5f7b-4dc4-b7e0-c1dc30938ceb'
  imageRepository: 'ptest'
  containerRegistry: 'terraacr789.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'terraacr789471870c2-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'ppsm288apitest-1289.terraname'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - script: |
              # Generate deployment YAML dynamically
              echo "apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: myapp
                labels:
                  app: myapp
              spec:
                replicas: 1
                selector:
                  matchLabels:
                    app: myapp
                template:
                  metadata:
                    labels:
                      app: myapp
                  spec:
                    containers:
                    - name: myapp
                      image: $(containerRegistry)/$(imageRepository):$(tag)
                      ports:
                      - containerPort: 80" > $(Pipeline.Workspace)/manifests/deployment.yml

              # Generate service YAML dynamically
              echo "apiVersion: v1
              kind: Service
              metadata:
                name: myapp
              spec:
                selector:
                  app: myapp
                ports:
                  - protocol: TCP
                    port: 80
                    targetPort: 5000" > $(Pipeline.Workspace)/manifests/service.yml
            displayName: Generate YAML files

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
